require 'rubygems'
require 'pp'
s = "ISA*00*          *00*          *ZZ*SENDER         *ZZ*RECEIVER       *080319*2327*U*00401*002721171*0*P*:~
GS*HC*SENDER*RECEIVER*20080319*2327*27211711*X*004010X091A1~
ST*835*1234~
BPR*C*150000*C*ACH*CTX*01*999999992*DA*123456
*1512345678**01*999988880*DA*98765*19960913~
TRN*1*12345*1512345678~
DTM*405*19960916~
N1*PR*INSURANCE COMPANY OF TIMBUCKTU~
N3*1 MAIN STREET~
N4*TIMBUCKTU*AK*89111~
REF*2U*999~
N1*PE*CYBIL MENTAL HOSPITAL*XX*6543210903~
LX*961211~
TS3*6543210903*11*19961231*1*211366.97*138018.4***
138018.4**73348.57~
TS2*2178.45*1919.71**56.82*197.69*4.23~
CLP*666123*1*211366.97*138018.4**MA*1999999444444*
11*1~
CAS*CO*A2*73348.57~
NM1*QC*1*SHEPARD*SAM*O***HN*666666666A~
MIA*0***138018.4~
DTM*232*19960816~
DTM*233*19960824~
QTY*CA*8~
LX*961213~
TS3*6543210909*13*19961231*1*15000*15000**
*11980.33**3019.67~
CLP*777777*1*15000*11980.33**MB*1999999444445*13*
1~
CAS*CO*A2*3019.67~
NM1*QC*1*BORDEN*LIZ*E***HN*996669999B~
NM1*82*2*CYBIL MENTAL HOSPITAL*****XX*6543210903~
MIA*0****MA130~
REF*EA*00000000012345~
DTM*050*19960128~
DTM*232*19961214~
DTM*233*19961216~
SVC*NU:0111*2000*0****2~
DTM*472*19961216~
CAS*CO*22*2000*2~
SVC*NU:0250*1113.08*0****217~
DTM*472*19961216~
CAS*CO*22*1113.08*217~
SVC*NU:0270*349.4*0****8~
DTM*472*19961216~
CAS*CO*22*349.4*8~
SVC*NU:0301*747.65*0****16~
DTM*472*19961216~
CAS*CO*22*747.65*16~
SVC*NU:0305*187.53*0****5~
DTM*472*19961216~
CAS*CO*22*187.53*5~
SVC*NU:0320*375.73*0****2~
DTM*472*19961216~
CAS*CO*22*375.73*2~
SVC*NU:0324*365.87*0****2~
DTM*472*19961216~
CAS*CO*22*365.87*2~
SVC*NU:0410*222.5*0****4~
DTM*472*19961216~
CAS*CO*22*222.5*4~
SVC*NU:0450*715.55*0****1~
DTM*472*19961216~
CAS*CO*22*715.55*1~
SVC*NU:0460*230*0****4~
DTM*472*19961216~
CAS*CO*22*230*4~
SVC*NU:0730*256.86*0****2~
DTM*472*19961216~
CAS*CO*22*256.86*2~
SVC*NU:0801*1550*0****2~
DTM*472*19961216~
CAS*CO*22*1550*2~
SE*28*1234~
ST*835*1234~
BPR*C*150000*C*ACH*CTX*01*999999992*DA*123456
*1512345678**01*999988880*DA*98765*19960913~
TRN*1*12345*1512345678~
DTM*405*19960916~
N1*PR*INSURANCE COMPANY OF TIMBUCKTU~
N3*1 MAIN STREET~
N4*TIMBUCKTU*AK*89111~
REF*2U*999~
N1*PE*CYBIL MENTAL HOSPITAL*XX*6543210903~
LX*961211~
TS3*6543210903*11*19961231*1*211366.97*138018.4***
138018.4**73348.57~
TS2*2178.45*1919.71**56.82*197.69*4.23~
CLP*666123*1*211366.97*138018.4**MA*1999999444444*
11*1~
CAS*CO*A2*73348.57~
NM1*QC*1*SHEPARD*SAM*O***HN*666666666A~
MIA*0***138018.4~
DTM*232*19960816~
DTM*233*19960824~
QTY*CA*8~
LX*961213~
TS3*6543210909*13*19961231*1*15000*15000**
*11980.33**3019.67~
CLP*777777*1*15000*11980.33**MB*1999999444445*13*
1~
CAS*CO*A2*3019.67~
NM1*QC*1*JONES*LEN*E***HN*996669999B~
MOA***MA02~
DTM*232*19960512~
PLB*6543210903*19961231*CV:CP*-1.27~
SE*28*1234~
ST*835*1234~
BPR*C*150000*C*ACH*CTX*01*999999992*DA*123456
*1512345678**01*999988880*DA*98765*19960913~
TRN*1*12345*1512345678~
DTM*405*19960916~
N1*PR*INSURANCE COMPANY OF TIMBUCKTU~
N3*1 MAIN STREET~
N4*TIMBUCKTU*AK*89111~
REF*2U*999~
N1*PE*CYBIL MENTAL HOSPITAL*XX*6543210903~
LX*961211~
TS3*6543210903*11*19961231*1*211366.97*138018.4***
138018.4**73348.57~
TS2*2178.45*1919.71**56.82*197.69*4.23~
CLP*666123*1*211366.97*138018.4**MA*1999999444444*
11*1~
CAS*CO*A2*73348.57~
NM1*QC*1*SMITH*JOE*E***HN*666666666A~
MIA*0***138018.4~
DTM*232*19960816~
DTM*233*19960824~
QTY*CA*8~
LX*961213~
TS3*6543210909*13*19961231*1*15000*15000**
*11980.33**3019.67~
CLP*777777*1*15000*11980.33**MB*1999999444445*13*
1~
CAS*CO*A2*3019.67~
NM1*QC*1*BORDEN*LIZ*E***HN*996669999B~
NM1*82*2*CYBIL MENTAL HOSPITAL*****XX*6543210903~
MIA*0****MA130~
REF*EA*00000000012345~
DTM*050*19960128~
DTM*232*19961214~
DTM*233*19961216~
SVC*NU:0111*2000*0****2~
DTM*472*19961216~
CAS*CO*22*2000*2~
SVC*NU:0250*1113.08*0****217~
DTM*472*19961216~
CAS*CO*22*1113.08*217~
SVC*NU:0270*349.4*0****8~
DTM*472*19961216~
CAS*CO*22*349.4*8~
SVC*NU:0301*747.65*0****16~
DTM*472*19961216~
CAS*CO*22*747.65*16~
SVC*NU:0305*187.53*0****5~
DTM*472*19961216~
CAS*CO*22*187.53*5~
SVC*NU:0320*375.73*0****2~
DTM*472*19961216~
CAS*CO*22*375.73*2~
SVC*NU:0324*365.87*0****2~
DTM*472*19961216~
CAS*CO*22*365.87*2~
SVC*NU:0410*222.5*0****4~
DTM*472*19961216~
CAS*CO*22*222.5*4~
SVC*NU:0450*715.55*0****1~
DTM*472*19961216~
CAS*CO*22*715.55*1~
SVC*NU:0460*230*0****4~
DTM*472*19961216~
CAS*CO*22*230*4~
SVC*NU:0730*256.86*0****2~
DTM*472*19961216~
CAS*CO*22*256.86*2~
SVC*NU:0801*1550*0****2~
DTM*472*19961216~
CAS*CO*22*1550*2~
SE*28*1234~
ST*835*1234~
BPR*C*150000*C*ACH*CTX*01*999999992*DA*123456
*1512345678**01*999988880*DA*98765*19960913~
TRN*1*12345*1512345678~
DTM*405*19960916~
N1*PR*INSURANCE COMPANY OF TIMBUCKTU~
N3*1 MAIN STREET~
N4*TIMBUCKTU*AK*89111~
REF*2U*999~
N1*PE*CYBIL MENTAL HOSPITAL*XX*6543210903~
LX*961211~
TS3*6543210903*11*19961231*1*211366.97*138018.4***
138018.4**73348.57~
TS2*2178.45*1919.71**56.82*197.69*4.23~
CLP*666123*1*211366.97*138018.4**MA*1999999444444*
11*1~
CAS*CO*A2*73348.57~
NM1*QC*1*SHEPARD*SAM*O***HN*666666666A~
MIA*0***138018.4~
DTM*232*19960816~
DTM*233*19960824~
QTY*CA*8~
LX*961213~
TS3*6543210909*13*19961231*1*15000*15000**
*11980.33**3019.67~
CLP*777777*1*15000*11980.33**MB*1999999444445*13*
1~
CAS*CO*A2*3019.67~
NM1*QC*1*BORDEN*LIZ*E***HN*996669999B~
MOA***MA02~
DTM*232*19960512~
PLB*6543210903*19961231*CV:CP*-1.27~
SE*28*1234~
GE*1*27211711~
IEA*1*002721171~"

@segments = []
segments = s.gsub("\n", "").split(/~/)
segments.each do |segment| 
  @segment =  {  
    segment[0,3].gsub("*", "").ljust(3) => segment.gsub(" ", "").
    gsub(":", "").                                    
    split(/\*/) 
  }
  @segments << @segment
end


@output = ''
     
     @output += "ts = Hippo::TransactionSets::HIPAA_835::Base.new"                    #Transaction set start
     
@segments.each do |segmento|
  segmento.each do |key, value|
    i = 0
    value.each do |x|
      seg = (key.to_s + "%02d" % i).gsub(" ", "")
      unless x == ""                                                                 #start unless
        case                                                                         #start meta case
        when  seg =~ /LX01/
          @output += "  seg.#{seg} = #{x}              #LX - Possible Loop" + "\n"
        when seg =~ /#{x.to_s}/  
          @output += "  end"+ "\n\n"
          @output += "  ts.#{key.upcase} do |seg|" + "\n"                            #segment loop
        else
          case                                                                      #start sub-case
          when x.to_i == 0
            @output += "    seg.#{seg} = '#{x}'" + "\n"                               #segments
          when x.to_i != 0
            @output += "    seg.#{seg} = rand(10 ** #{x.length})" + "\n"
          end                                                                       #end sub-case
        end                                                                         #end meta-case
        i += 1 
      end                                                                           #end unless
    end
  end  
end

@output += "  end" + "\n" + "end"                                                   #Transaction set end

File.open("./sample_parsed.rb", "w") do |line|
  line.write(@output)
end
puts @output

  
  
  
  
  
  
